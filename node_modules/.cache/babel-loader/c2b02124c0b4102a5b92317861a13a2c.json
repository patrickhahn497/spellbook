{"ast":null,"code":"var _jsxFileName = \"/Users/patrickhahn/Documents/GitHub/spellbook/src/components/Feature.js\";\nimport React from 'react'; // so far as I can tell, there are three types of features\n// \t1) Standard (name, text) \n// \t2) features with subfeatures\n// \t3) Features that give spells\n\nfunction returnFeatureWithSubs(feature) {\n  console.log(\"wassup\");\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, feature.subfeatures.map(subfeature => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, subfeature.name)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, subfeature.text));\n  }));\n}\n\nfunction returnStandardFeature(feature) {\n  return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" \", feature.text, \" \");\n}\n\nfunction returnSpellsFeature(feature) {\n  /* In the future, add a way to only show spells that should show up at your current level */\n  const spells = feature.spells;\n  const keys = Object.keys(spells);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \" \", feature.text, \" \"), keys.map(level => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, level, \": \", spells[0]));\n  }));\n}\n\nconst processFeature = feature => {\n  // if (subfeatures in feature){\n  // \treturn returnFeatureWithSubs;\n  // } else if (spells in feature) {\n  // \treturn returnSpellsFeature;\n  // } else {\n  // \treturn returnStandardFeature;\n  // }\n  if (feature.hasOwnProperty('subfeatures')) {\n    console.log(\"subfeature\");\n    return returnFeatureWithSubs(feature);\n  } else if (feature.hasOwnProperty('spells')) {\n    return returnSpellsFeature;\n  } else {\n    return returnStandardFeature;\n  }\n};\n\nconst Feature = ({\n  levelFeatures\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \" \", React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, levelFeatures.name), \" \"), processFeature(levelFeatures));\n};\n\nexport default Feature;","map":{"version":3,"sources":["/Users/patrickhahn/Documents/GitHub/spellbook/src/components/Feature.js"],"names":["React","returnFeatureWithSubs","feature","console","log","subfeatures","map","subfeature","name","text","returnStandardFeature","returnSpellsFeature","spells","keys","Object","level","processFeature","hasOwnProperty","Feature","levelFeatures"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAGA;AACA;AACA;AACA;;AAIA,SAASC,qBAAT,CAA+BC,OAA/B,EAAuC;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEF,OAAO,CAACG,WAAR,CAAoBC,GAApB,CAAyBC,UAAD,IAAgB;AACvC,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,UAAU,CAACC,IAAf,CAAJ,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,UAAU,CAACE,IAAhB,CAFD,CADD;AAMA,GAPD,CAFF,CADD;AAcA;;AAED,SAASC,qBAAT,CAA+BR,OAA/B,EAAwC;AACvC,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMA,OAAO,CAACO,IAAd,MADD;AAGA;;AAED,SAASE,mBAAT,CAA6BT,OAA7B,EAAsC;AACrC;AACA,QAAMU,MAAM,GAAGV,OAAO,CAACU,MAAvB;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,MAAZ,CAAb;AACA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMV,OAAO,CAACO,IAAd,MADD,EAGEI,IAAI,CAACP,GAAL,CAAUS,KAAD,IAAW;AACnB,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAL,QAAcH,MAAM,CAAC,CAAD,CAApB,CADD,CADD;AAKA,GAND,CAHF,CADD;AAeA;;AAED,MAAMI,cAAc,GAAId,OAAD,IAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIA,OAAO,CAACe,cAAR,CAAuB,aAAvB,CAAJ,EAA0C;AACzCd,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAOH,qBAAqB,CAACC,OAAD,CAA5B;AACA,GAHD,MAGO,IAAIA,OAAO,CAACe,cAAR,CAAuB,QAAvB,CAAJ,EAAsC;AAC5C,WAAON,mBAAP;AACA,GAFM,MAEA;AACN,WAAOD,qBAAP;AACA;AAED,CAjBD;;AAqBA,MAAMQ,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAqB;AAGpC,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,aAAa,CAACX,IAAlB,CAAL,MADD,EAEEQ,cAAc,CAACG,aAAD,CAFhB,CADD;AAOA,CAVD;;AAcA,eAAeD,OAAf","sourcesContent":["import React from 'react';\n\n\n// so far as I can tell, there are three types of features\n// \t1) Standard (name, text) \n// \t2) features with subfeatures\n// \t3) Features that give spells\n\n\n\nfunction returnFeatureWithSubs(feature){\n\tconsole.log(\"wassup\");\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\tfeature.subfeatures.map((subfeature) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3><b>{subfeature.name}</b></h3>\n\t\t\t\t\t\t\t<h3>{subfeature.text}</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nfunction returnStandardFeature(feature) {\n\treturn (\n\t\t<h2> {feature.text} </h2>\n\t);\n}\n\nfunction returnSpellsFeature(feature) {\n\t/* In the future, add a way to only show spells that should show up at your current level */\n\tconst spells = feature.spells;\n\tconst keys = Object.keys(spells);\n\treturn (\n\t\t<div>\n\t\t\t<h3> {feature.text} </h3>\n\t\t\t{\n\t\t\t\tkeys.map((level) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3>{level}: {spells[0]}</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\n\t);\n}\n\nconst processFeature = (feature) => {\n\t// if (subfeatures in feature){\n\t// \treturn returnFeatureWithSubs;\n\t// } else if (spells in feature) {\n\t// \treturn returnSpellsFeature;\n\t// } else {\n\t// \treturn returnStandardFeature;\n\t// }\n\tif (feature.hasOwnProperty('subfeatures')){\n\t\tconsole.log(\"subfeature\")\n\t\treturn returnFeatureWithSubs(feature);\n\t} else if (feature.hasOwnProperty('spells')) {\n\t\treturn returnSpellsFeature;\n\t} else {\n\t\treturn returnStandardFeature;\n\t}\n\n} \n\n\n\nconst Feature = ({levelFeatures}) => {\n\n\n\treturn (\n\t\t<div>\n\t\t\t<h1> <b>{levelFeatures.name}</b> </h1>\n\t\t\t{processFeature(levelFeatures)}\n\t\t</div>\n\t);\n\n}\n\n\n\nexport default Feature;"]},"metadata":{},"sourceType":"module"}