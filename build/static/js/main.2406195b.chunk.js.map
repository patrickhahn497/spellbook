{"version":3,"sources":["logo.svg","components/SearchBox.js","components/SpellPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","searchfield","searchChange","searchClick","onEnter","className","type","placeholder","id","onChange","onKeyPress","onClick","SpellPanel","name","desc","range","level","higher_level","duration","concentration","casting_time","App","onSearchChange","event","setState","target","value","toLowerCase","console","log","state","search","urlifySpell","searchUrl","fetch","then","response","json","spell","result","catch","onSearchClick","which","keyCode","preventDefault","text","linkUrl","split","join","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2406195b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './SearchBox.css';\n\n\n\n\nconst SearchBox = ({searchfield, searchChange, searchClick, onEnter}) => {\n  return (\n    <div className='pa2'>\n      <form>\n        <input \n          className='pa3 ba b--green bg-lightest-blue'\n          type='search' \n          placeholder='search spells'\n          id=\"input1\"\n          onChange={searchChange}\n          onKeyPress={onEnter}\n        />\n        <button type='button' className='searchbutton' onClick={searchClick}>Search</button>\n      </form>\n    </div>\n  );\n}\n\nexport default SearchBox;\n\n\n// <button type='button' onClick={searchClick}>Submit</button>","import React from 'react';\nimport './SpellPanel.css';\n\nconst SpellPanel = ({name, desc, range, level, higher_level, duration, concentration, casting_time}) => {\n\n\treturn (\n\t\t<div className=\"bg-yellow dib br1 pa3 ma2 grow bw2 shadow5\">\n\t\t\t<h2> <b>Name:</b> {name} </h2>\n\t\t\t<p> <b>Description: </b>{desc} </p>\n\t\t\t<p> <b>Higher Level: </b> {higher_level} </p>\n\t\t\t<p> <b>Level: </b> {level} </p>\n\t\t\t<p> <b>Duration: </b> {duration} </p>\n\t\t\t<p> <b>Concentration: </b> {concentration} </p>\n\t\t\t<p> <b>Casting Time: </b> {casting_time} </p>\n\t\t\t<p> <b>Range: </b> {range}  </p>\n\t\t</div>\n\n\t);\n}\n\nexport default SpellPanel;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'tachyons';\nimport SearchBox from './components/SearchBox'\nimport SpellPanel from './components/SpellPanel'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      //class: {},   this is to be used when we implement class functionality\n      searchfield: '',\n      result: {name: \"\",\n                desc: \"\",\n                range: \"\",\n                level: null},\n      searchUrl : \"\"\n    }\n  }\n\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value.toLowerCase()});\n    console.log(\"searchfield: \" + this.state.searchfield);\n    // console.log(\"search url\" + this.state.searchUrl);\n  }\n\n\n  search = () => {\n    this.urlifySpell(this.state.searchfield);\n    console.log(this.state.searchUrl);\n    if (this.state.searchUrl){\n      fetch(this.state.searchUrl)\n        .then(response=>response.json())\n        .then(spell => this.setState({result: spell}))\n        .catch(() => console.log(\"Search Error\"));\n    }\n    // console.log(this.urlifySpell(this.state.searchfield));\n    console.log(this.state.searchUrl);\n    console.log(this.state.searchfield);\n\n  }\n\n  onSearchClick = (event) => {\n    this.search();\n  }\n\n  onEnter = (event) => {\n    if (event.which===13 || event.keyCode===13){\n      event.preventDefault();\n      this.search();\n    }\n  }\n\n\n  urlifySpell(text) {\n    const queries = text.split(\" \");\n    // const linkUrl = 'https://www.dnd5eapi.co/api/spells/?name=' + queries.join(\"+\");\n    const linkUrl = 'https://www.dnd5eapi.co/api/spells/' + queries.join(\"-\");\n    var spellUrl = '';\n    console.log(linkUrl);\n    this.setState({searchUrl: linkUrl});\n    // fetch(linkUrl)\n    //   .then(response=>response.json())\n    //   .then(result=> {\n    //     if (result.count){\n    //       this.setState({searchUrl: result.results[0].url});\n    //     } else {\n    //       window.alert(\"No result found\");\n    //     }\n    // })\n    //   .catch(() => console.log(\"Urlify Error\"));\n\n    // console.log(\"spellurl \" + spellUrl);\n    // console.log(\"searchurl \" + this.state.searchUrl);\n\n  }\n\n  render() {\n\n    const {name, desc, range, level, higher_level, duration, concentration, casting_time} = this.state.result;\n\n    return (\n      <div className=\"tc\">\n        <h1 className=\"tc title\">Spellbook</h1>\n        <p> Click twice if search results don't come in the first time. The oracle needs time to browse the spell library </p>\n        <p> If the spell isn't here, it's because it's a Xanathar spell. The oracle does not have access to those</p>\n        <SearchBox searchClick={this.onSearchClick} searchfield={this.state.searchfield} searchChange={this.onSearchChange} onEnter={this.onEnter}/>\n        <SpellPanel name={name} desc={desc} range={range} level={level} higher_level={higher_level} duration={duration} concentration={concentration}\n          casting_time={casting_time}/>\n      </div>\n      );\n\n  }\n\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}